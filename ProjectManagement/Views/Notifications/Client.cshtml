@{
    ViewData["Title"] = "Client";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Notification Center</h1>

    <div class="card-body">
    @Html.AntiForgeryToken()
        <div id="notificationList">
            <!-- The notification list will be added here by JavaScript -->
        </div>
    </div>


@section Scripts {

    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/signalr/dist/browser/signalr.min.js"></script>

    @*<script>

        "use strict";
        var username = '@User.Identity.Name';
        //define connection to hub
        var connection = new signalR.HubConnectionBuilder().withUrl("/NotificationsHub").build();

        //start the hub connection
        $(function () {
            connection.start().then(function () {
                alert('Connected to NotificationsHub '+ username);
                InvokeNotifications(username); //to load existing list of notifications
            }).catch(function (err) {
                return console.error(err.toString());
            });
        });
   

        function InvokeNotifications(username) {         
            var url = "../Notifications/GetForUser?username=" + username;
            console.log(url);
            $.get(url, function (nData) {
                BindNotificationsToGrid(nData);
            });
        };
      //the server will call this will updated notification list on every database change
        connection.on("getUpdatedNotifications", function (notifications) {
            BindNotificationsToGrid(notifications);
            InvokeNotifications(username); //refresh the notification 
        });

        function BindNotificationsToGrid(notifications) {
           console.log(notifications);
            $('#tblNotifications tbody').empty();

            var tr;
            $.each(notifications, function (index, notification) {
                var tr = $('<tr/>');

                tr.append(`<td>${index + 1}</td>`);
                tr.append(`<td>${notification.notificationText}</td>`);
                tr.append(`<td>${new Date(notification.generatedAt).toLocaleString()}</td>`);
                tr.append(`<td>${notification.isRead ? "Read" : "Not read"}</td>`);

                var form = $('<form/>', {
                    action: `/Notifications/Delete/${notification.notificationId}`,
                    method: 'POST'
                });

                var deleteButton = $('<button/>', {
                    text: 'Delete',
                    class: 'btn btn-danger',
                    click: function () {
                        if (confirm('Are you sure you want to delete this notification?')) {
                            DeleteNotification(notification.notificationId);
                        }
                    }
                });
                var markAsReadButton = $('<button/>', {
                    text: 'Mark as Read',
                    class: 'btn btn-primary',
                    click: function () {
                        MarkNotificationAsRead(notification.notificationId);
                    },
                    disabled: notification.isRead // Disable the button if the notification is already read
                });

                var antiForgeryToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                var antiForgeryInput = $('<input/>', {
                    type: 'hidden',
                    name: '__RequestVerificationToken',
                    value: antiForgeryToken
                });

                form.append(deleteButton);
                form.append(antiForgeryInput);
                tr.append($('<td>').append(form));
                var markAsReadTd = $('<td/>');
                markAsReadTd.append(markAsReadButton);
                tr.append(markAsReadTd);

                $('#tblNotifications').append(tr);
            });
        }



        function DeleteNotification(id) {
            console.log('Deleting notification with ID: ' + id);

            // Send an AJAX request to the server to delete the notification
            $.ajax({
                url: `/Notifications/Delete/${id}`,
                type: 'DELETE',
                data: { id: id },
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("X-CSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: function (result) {
                    
                        // Handle the success response and perform any necessary actions
                        alert('Delete successful!');
                        InvokeNotifications(username); //refresh the notification
                    
                     
                },
                error: function (error) {
                    console.log('Error deleting notification:');
                    console.log(error);
                }
            });
        }
        function MarkNotificationAsRead(notificationId) {
            console.log('Marking notification as read with ID: ' + notificationId);

            // Send an AJAX request to the server to mark the notification as read
            $.ajax({
                url: `/Notifications/MarkAsRead/${notificationId}`,
                type: 'PUT',
                data: { id: notificationId },
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("X-CSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: function (result) {
                    console.log('Notification marked as read successfully!');
                    console.log(result);
                    InvokeNotifications(username); //refresh the notification
                },
                error: function (error) {
                    console.log('Error marking notification as read:');
                    console.log(error);
                }
            });
        }
     


    </script>*@

    <script>

        "use strict";
        var username = '@User.Identity.Name';
        //define connection to hub
        var connection = new signalR.HubConnectionBuilder().withUrl("/NotificationsHub").build();

        //start the hub connection
        $(function () {
            connection.start().then(function () {
                
                InvokeNotifications(username); //to load existing list of notifications
            }).catch(function (err) {
                return console.error(err.toString());
            });
        });


        function InvokeNotifications(username) {
            var url = "../Notifications/GetForUser?username=" + username;
            console.log(url);
            $.get(url, function (nData) {
                BindNotificationsToCard(nData);
            });
        };
        //the server will call this will updated notification list on every database change
        connection.on("getUpdatedNotifications", function (notifications) {
            BindNotificationsToCard(notifications);
            InvokeNotifications(username); //refresh the notification
        });

        function BindNotificationsToCard(notifications) {
            console.log(notifications);
            $('#notificationList').empty();

            $.each(notifications, function (index, notification) {
                var notificationCard = $('<div/>', {
                    class: 'card bg-light mb-3'
                });

                var notificationCardBody = $('<div/>', {
                    class: 'card-body'
                });

                var notificationTitle = $('<h5/>', {
                    class: 'card-title',
                    text: notification.notificationText
                });

                var notificationDate = $('<h6/>', {
                    class: 'card-text',
                    text: new Date(notification.generatedAt).toLocaleString()
                });

                var notificationStatus = $('<h6/>', {
                    class: 'card-subtitle mb-2',
                    text: notification.isRead ? 'Read' : 'Not read'
                });

                var notificationContent = $('<p/>', {
                    class: 'card-text',
                    text: notification.notificationContent
                });

                var deleteButton = $('<button/>', {
                    type: 'button',
                    class: 'btn btn-danger ml-2',
                    text: 'Delete',
                    click: function () {
                      
                            DeleteNotification(notification.notificationId);
                        
                    }
                });

                var markAsReadButton = null;
                if (!notification.isRead) {
                    markAsReadButton = $('<button/>', {
                        type: 'button',
                        class: 'btn btn-primary ml-2',
                        text: 'Mark as Read',
                        click: function () {
                            MarkNotificationAsRead(notification.notificationId);
                        }
                    });
                }
                var antiForgeryToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                var antiForgeryInput = $('<input/>', {
                    type: 'hidden',
                    name: '__RequestVerificationToken',
                    value: antiForgeryToken
                });


                notificationCardBody.append(notificationTitle);
                notificationCardBody.append(notificationDate);
                notificationCardBody.append(notificationStatus);
                notificationCardBody.append(notificationContent);
                notificationCardBody.append(deleteButton);
                notificationCardBody.append(markAsReadButton);
                notificationCard.append(notificationCardBody);
                $('#notificationList').append(notificationCard);
            });
        }

        function DeleteNotification(id) {
            // Ask for confirmation before deleting the notification
            if (confirm("Are you sure you want to delete this notification?")) {
                console.log('Deleting notification with ID: ' + id);

                // Send an AJAX request to the server to delete the notification
                $.ajax({
                    url: `/Notifications/Delete/${id}`,
                    type: 'DELETE',
                    data: { id: id },
                    headers: {
                        "RequestVerificationToken": $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function (result) {
                        // Handle the success response and perform any necessary actions
                        
                        InvokeNotifications(username); // refresh the notification
                    },
                    error: function (error) {
                        console.log('Error deleting notification:' + id);
                        console.log(error);
                    }
                });
            }
        }
        //function DeleteNotification(id) {
        //    console.log('Deleting notification with ID: ' + id);

        //    // Send an AJAX request to the server to delete the notification
        //    $.ajax({
        //        url: `/Notifications/Delete/${id}`,
        //        type: 'DELETE',
        //        data: { id: id },
        //        beforeSend: function (xhr) {
        //            xhr.setRequestHeader("X-CSRF-TOKEN",
        //                $('input:hidden[name="__RequestVerificationToken"]').val());
        //        },
        //        success: function (result) {

        //            // Handle the success response and perform any necessary actions
        //            alert('Delete successful!');
        //            InvokeNotifications(username); //refresh the notification


        //        },
        //        error: function (error) {
        //            console.log('Error deleting notification:');
        //            console.log(error);
        //        }
        //    });
        //}
        function MarkNotificationAsRead(notificationId) {
            console.log('Marking notification as read with ID: ' + notificationId);

            // Send an AJAX request to the server to mark the notification as read
            $.ajax({
                url: `/Notifications/MarkAsRead/${notificationId}`,
                type: 'PUT',
                data: { id: notificationId },
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("X-CSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: function (result) {
                    console.log('Notification marked as read successfully!');
                    console.log(result);
                    InvokeNotifications(username); //refresh the notification
                },
                error: function (error) {
                    console.log('Error marking notification as read:');
                    console.log(error);
                }
            });
        }
    </script>

}
