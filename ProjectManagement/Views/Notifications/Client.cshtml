@{
    ViewData["Title"] = "Client";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Notification Center</h1>

<div>
    <div class="row">
        <div class="col-md-8">
            <div class="x_panel">
                <div class="x_title">
                    <h4>Notifications</h4>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">
                    <table class="table table-hover" id="tblNotifications">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Notification</th>
                                <th>Date / Time</th>
                                <th>Read</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>


    </div>


</div>

@section Scripts {

    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/signalr/dist/browser/signalr.min.js"></script>

    <script>

        "use strict";
        var username = '@User.Identity.Name';
        //define connection to hub
        var connection = new signalR.HubConnectionBuilder().withUrl("/NotificationsHub").build();

        //start the hub connection
        $(function () {
            connection.start().then(function () {
                alert('Connected to NotificationsHub '+ username);
                InvokeNotifications(username); //to load existing list of notifications
            }).catch(function (err) {
                return console.error(err.toString());
            });
        });
        //initially, we need to show the list of all notifications
        //So we will use our action method that returns Json
        //function InvokeNotifications() {
        //    var url = "../Notifications/GetAll";
        //    $.get(url, function (nData) {
        //        BindNotificationsToGrid(nData);
        //    }
        //    );
        //};

        function InvokeNotifications(username) {         
            var url = "../Notifications/GetForUser?username=" + username;
            console.log(url);
            $.get(url, function (nData) {
                BindNotificationsToGrid(nData);
            });
        };
      //the server will call this will updated notification list on every database change
        connection.on("getUpdatedNotifications", function (notifications) {
            BindNotificationsToGrid(notifications);
            InvokeNotifications(username); //refresh the notification 
        });

        function BindNotificationsToGrid(notifications) {
           console.log(notifications);
            $('#tblNotifications tbody').empty();

            var tr;
            $.each(notifications, function (index, notification) {
                var tr = $('<tr/>');

                tr.append(`<td>${index + 1}</td>`);
                tr.append(`<td>${notification.notificationText}</td>`);
                tr.append(`<td>${new Date(notification.generatedAt).toLocaleString()}</td>`);
                tr.append(`<td>${notification.isRead ? "Read" : "Not read"}</td>`);

                var form = $('<form/>', {
                    action: `/Notifications/Delete/${notification.notificationId}`,
                    method: 'POST'
                });

                var deleteButton = $('<button/>', {
                    text: 'Delete',
                    class: 'btn btn-danger',
                    click: function () {
                        DeleteNotification(notification.notificationId);
                    }
                });
                var markAsReadButton = $('<button/>', {
                    text: 'Mark as Read',
                    class: 'btn btn-primary',
                    click: function () {
                        MarkNotificationAsRead(notification.notificationId);
                    },
                    disabled: notification.isRead // Disable the button if the notification is already read
                });

                var antiForgeryToken = $('input:hidden[name="__RequestVerificationToken"]').val();
                var antiForgeryInput = $('<input/>', {
                    type: 'hidden',
                    name: '__RequestVerificationToken',
                    value: antiForgeryToken
                });

                form.append(deleteButton);
                form.append(antiForgeryInput);
                tr.append($('<td>').append(form));
                var markAsReadTd = $('<td/>');
                markAsReadTd.append(markAsReadButton);
                tr.append(markAsReadTd);

                $('#tblNotifications').append(tr);
            });
        };





        function DeleteNotification(id) {
            console.log('Deleting notification with ID: ' + id);

            // Send an AJAX request to the server to delete the notification
            $.ajax({
                url: `/Notifications/Delete/${id}`,
                type: 'DELETE',
                data: { id: id },
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("X-CSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: function (result) {
                    
                        // Handle the success response and perform any necessary actions
                        alert('Delete successful!');
                        InvokeNotifications(username); //refresh the notification
                    
                     
                },
                error: function (error) {
                    console.log('Error deleting notification:');
                    console.log(error);
                }
            });
        };


        function MarkNotificationAsRead(notificationId) {
            console.log('Marking notification as read with ID: ' + notificationId);

            // Send an AJAX request to the server to mark the notification as read
            $.ajax({
                url: `/Notifications/MarkAsRead/${notificationId}`,
                type: 'PUT',
                data: { id: notificationId },
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("X-CSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: function (result) {
                    console.log('Notification marked as read successfully!');
                    LoadNotifications();
                },
                error: function (error) {
                    console.log('Error marking notification as read:');
                    console.log(error);
                }
            });
        };

                tr.append(`<td><button class="btn btn-danger" onclick="DeleteNotification(${JSON.stringify(notification)})">Delete</button></td>`);
                $('#tblNotifications').append(tr);
            });
        };

        

        //function DeleteNotification(notification) {
        //    console.log('notification: ' + JSON.stringify(notification));

        //    // Send an AJAX request to the server to delete the notification
        //    $.ajax({
        //        url: `/Notifications/DeleteNotification/${notification.id}`,
        //        type: 'POST',
        //        data: { id: notification.id },
        //        success: function (result) {
        //            console.log('DeleteNotification success');
        //            // Refresh the notifications table
        //            InvokeNotifications();
        //        },
        //        error: function (xhr, status, error) {
        //            console.log('DeleteNotification error: ' + error);
        //        }
        //    });
        //}
    </script>


}
