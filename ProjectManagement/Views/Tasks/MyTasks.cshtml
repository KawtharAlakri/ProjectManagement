@model IEnumerable<ProjectManagement.Models.Task>

@{
    ViewData["Title"] = "MyTasks";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1 class="mt-4">My Tasks</h1>
@if (TempData.ContainsKey("ErrorMessage") && !String.IsNullOrEmpty(TempData["ErrorMessage"].ToString()))
{
    <div class="alert alert-dismissible alert-danger">
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        <strong>@TempData["ErrorMessage"] </strong>
    </div>
}
@if (TempData.ContainsKey("SuccessMessage") && !String.IsNullOrEmpty(TempData["SuccessMessage"].ToString()))
{
    <div class="alert alert-dismissible alert-success">
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        <strong>@TempData["SuccessMessage"]</strong>
    </div>
}
@if (Model.Count() == 0)
{
    <div class="alert alert-dismissible alert-danger">
        You don't have any tasks yet.
    </div>
}
<div class="row">
    <div class="col-md-6">
        <div class="card border-0 mb-4">
            <div class="card-body d-flex align-items-center border-bottom">
                <form asp-action="MyTasks" asp-controller="Tasks" method="get" class="d-flex">

                    <div class="input-group me-3">
                        <input type="text" name="searchString" class="form-control" placeholder="Search by task name.." value="@ViewBag.searchString" />
                        <button class="btn btn-outline-secondary" type="submit">Search</button>
                    </div>
                    <div class="dropdown">
                        <button class="btn btn-light dropdown-toggle" type="button" id="filterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bi bi-funnel"></i> Filter
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="filterDropdown">
                            <li>
                                <h6 class="dropdown-header text-info">Tasks For Project</h6>
                                <ul class="list-unstyled">
                                    @foreach (var project in (SelectList)ViewData["Projects"])
                                    {
                                        <li>
                                            <a class="dropdown-item" asp-action="MyTasks" asp-controller="Tasks" asp-route-projectFilter="@project.Value">@project.Text</a>
                                        </li>
                                    }
                                </ul>

                            </li>
                            <li>
                                <h6 class="dropdown-header text-info">Tasks With Status</h6>
                                <ul class="list-unstyled">
                                    <li><a class="dropdown-item" asp-action="MyTasks" asp-controller="Tasks" asp-route-statusFilter="completed">Completed</a></li>
                                    <li><a class="dropdown-item" asp-action="MyTasks" asp-controller="Tasks" asp-route-statusFilter="overdue">Overdue</a></li>
                                    <li><a class="dropdown-item" asp-action="MyTasks" asp-controller="Tasks" asp-route-statusFilter="in progress">In Progress</a></li>
                                </ul>
                            </li>
                        </ul>
                    </div>
                    <div class="ms-3">
                        <a asp-action="MyTasks" asp-controller="Tasks" class="btn btn-light">Reset</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
   
</div>


<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.TaskName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            @*<th>
                @Html.DisplayNameFor(model => model.CreatedAt)
            </th>*@
            <th>
                @Html.DisplayNameFor(model => model.DueDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Project)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StatusNavigation)
            </th>
        </tr>
    </thead>
    <tbody> 
@foreach (var item in Model) {
            <tr onclick="location.href='@Url.Action("Details", new { id = item.TaskId })';" style="cursor:pointer;">
                <td>
                @Html.DisplayFor(modelItem => item.TaskName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            @*<td>
                @Html.DisplayFor(modelItem => item.CreatedAt)
            </td>*@
            <td>
                @Html.DisplayFor(modelItem => item.DueDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Project.ProjectName)
            </td>
            <td>
                        <span class="badge @GetBadgeClass(item.Status)">                     
                            @Html.DisplayFor(modelItem => item.StatusNavigation.StatusName)
                            </span>
            </td>
        </tr>
        
}
    </tbody>
</table>

@functions {
    public string GetBadgeClass(string status)
    {
        switch (status.ToLower())
        {
            case "completed":
                return "badge bg-success";
            case "overdue":
                return "badge bg-danger";
            case "in progress":
                return "badge bg-warning";
            default:
                return "badge";
        }
    }
}
